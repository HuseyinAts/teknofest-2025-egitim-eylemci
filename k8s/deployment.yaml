apiVersion: apps/v1
kind: Deployment
metadata:
  name: teknofest-api
  namespace: production
  labels:
    app: teknofest-api
    environment: production
    version: v1
spec:
  replicas: 3  # Initial replicas, will be managed by HPA
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: teknofest-api
  template:
    metadata:
      labels:
        app: teknofest-api
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - teknofest-api
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: api
        image: teknofest/api:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        env:
        - name: APP_ENV
          value: "production"
        - name: API_WORKERS
          value: "4"  # Workers per pod
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_TO_STDOUT
          value: "true"
        - name: AUTO_SCALE_ENABLED
          value: "false"  # Kubernetes handles scaling
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: teknofest-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: teknofest-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: teknofest-secrets
              key: secret-key
        - name: HUGGING_FACE_HUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: teknofest-secrets
              key: hf-token
        
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        volumeMounts:
        - name: cache
          mountPath: /app/cache
        - name: logs
          mountPath: /var/log/teknofest
        - name: uploads
          mountPath: /app/uploads
      
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for db; sleep 2; done;']
      
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z redis-service 6379; do echo waiting for redis; sleep 2; done;']
      
      volumes:
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
      - name: uploads
        persistentVolumeClaim:
          claimName: teknofest-uploads-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: teknofest-api-service
  namespace: production
  labels:
    app: teknofest-api
spec:
  type: ClusterIP
  selector:
    app: teknofest-api
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: teknofest-api-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: teknofest-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 4
        periodSeconds: 30
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: teknofest-api-pdb
  namespace: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: teknofest-api

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: teknofest-api-config
  namespace: production
data:
  gunicorn.conf: |
    workers = 4
    worker_class = 'uvicorn.workers.UvicornWorker'
    max_requests = 1000
    max_requests_jitter = 100
    timeout = 30
    graceful_timeout = 30
    keepalive = 5
    accesslog = '-'
    errorlog = '-'
    loglevel = 'info'

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: teknofest-api-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    - api.teknofest.example.com
    secretName: teknofest-api-tls
  rules:
  - host: api.teknofest.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: teknofest-api-service
            port:
              number: 80