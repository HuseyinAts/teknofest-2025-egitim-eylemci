name: Coverage Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run coverage analysis daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  MIN_COVERAGE: 80
  MIN_BRANCH_COVERAGE: 75

jobs:
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better coverage tracking
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-html pytest-json-report
      
      - name: Run tests with coverage
        run: |
          python scripts/coverage_report.py --markdown --badges --sonar
        continue-on-error: true
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            test_results/coverage/
            .coverage
          retention-days: 30
      
      - name: Generate coverage comment
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: 85
          MINIMUM_ORANGE: 70
          ANNOTATE_MISSING_LINES: true
          ANNOTATION_TYPE: warning
      
      - name: Coverage Badge
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: coverage-badge-gist-id
          filename: coverage-badge.json
          label: Coverage
          message: ${{ env.COVERAGE_PERCENT }}%
          color: ${{ env.COVERAGE_COLOR }}
      
      - name: Check coverage thresholds
        run: |
          python -c "
          import json
          with open('test_results/coverage/coverage.json') as f:
              data = json.load(f)
          line_cov = data['totals']['percent_covered']
          branch_cov = data['totals'].get('percent_covered_branches', 0)
          
          print(f'Line Coverage: {line_cov:.2f}%')
          print(f'Branch Coverage: {branch_cov:.2f}%')
          
          if line_cov < ${{ env.MIN_COVERAGE }}:
              print(f'❌ Line coverage {line_cov:.2f}% is below minimum {${{ env.MIN_COVERAGE }}}%')
              exit(1)
          if branch_cov < ${{ env.MIN_BRANCH_COVERAGE }}:
              print(f'⚠️  Branch coverage {branch_cov:.2f}% is below target {${{ env.MIN_BRANCH_COVERAGE }}}%')
          
          print('✅ Coverage meets requirements')
          "
      
      - name: SonarQube Analysis
        if: github.event_name == 'push'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=teknofest-2025-egitim-eylemci
            -Dsonar.organization=teknofest
            -Dsonar.sources=src,backend
            -Dsonar.tests=tests
            -Dsonar.python.coverage.reportPaths=test_results/coverage/sonar-coverage.xml
            -Dsonar.python.version=${{ env.PYTHON_VERSION }}
      
      - name: Post coverage summary
        if: always()
        run: |
          echo "## Coverage Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "test_results/coverage/COVERAGE_REPORT.md" ]; then
            cat test_results/coverage/COVERAGE_REPORT.md >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi

  coverage-matrix:
    name: Coverage by Python Version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run coverage for Python ${{ matrix.python-version }}
        run: |
          python scripts/coverage_report.py --test-path tests --no-parallel
      
      - name: Upload version-specific coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-py${{ matrix.python-version }}
          path: test_results/coverage/coverage.json

  coverage-diff:
    name: Coverage Diff Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
      
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install diff-cover
      
      - name: Generate base coverage
        working-directory: base
        run: |
          python scripts/coverage_report.py
          cp test_results/coverage/coverage.xml ../base-coverage.xml
      
      - name: Generate PR coverage
        run: |
          python scripts/coverage_report.py
      
      - name: Calculate coverage diff
        run: |
          diff-cover test_results/coverage/coverage.xml \
            --compare-branch=origin/${{ github.base_ref }} \
            --html-report=test_results/coverage/diff-coverage.html \
            --markdown-report=test_results/coverage/diff-coverage.md \
            --fail-under=80
      
      - name: Post diff report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const diffReport = fs.readFileSync('test_results/coverage/diff-coverage.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Coverage Diff Report\n\n${diffReport}`
            });