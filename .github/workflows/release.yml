name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  # Validate Release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      previous_version: ${{ steps.version.outputs.previous_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Get previous version
          PREVIOUS_VERSION=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "v0.0.0")
          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi

  # Generate Changelog
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PREVIOUS_VERSION="${{ needs.validate.outputs.previous_version }}"
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          # Get commit messages
          git log --pretty=format:"- %s (%an)" ${PREVIOUS_VERSION}..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          # Get contributors
          echo "## Contributors" >> $GITHUB_OUTPUT
          git log --pretty=format:"- @%an" ${PREVIOUS_VERSION}..HEAD | sort -u >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Build Release Assets
  build-assets:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: teknofest-linux-amd64
          - os: windows-latest
            artifact_name: teknofest-windows-amd64.exe
          - os: macos-latest
            artifact_name: teknofest-darwin-amd64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable
        run: |
          pyinstaller --onefile --name ${{ matrix.artifact_name }} src/main.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}

  # Build Docker Images
  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/teknofest-egitim:${{ needs.validate.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/teknofest-egitim:latest
            ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.version }}
            ghcr.io/${{ github.repository }}:latest

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, changelog, build-assets, docker-release]
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body: |
            ${{ needs.changelog.outputs.changelog }}
            
            ## Docker Image
            ```bash
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/teknofest-egitim:${{ needs.validate.outputs.version }}
            ```
            
            ## Installation
            Download the appropriate binary for your platform from the assets below.
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          files: |
            artifacts/**/*

  # Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in docs
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # Update version in documentation files
          sed -i "s/version: .*/version: $VERSION/" docs/conf.py || true
          sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION#v}\"/" package.json || true
          sed -i "s/version = \".*\"/version = \"${VERSION#v}\"/" pyproject.toml || true

      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "chore: update version to ${{ needs.validate.outputs.version }}"
          git push || true

  # Deploy Documentation
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [validate, update-docs]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install mkdocs mkdocs-material sphinx

      - name: Build documentation
        run: |
          mkdocs build || sphinx-build -b html docs/ docs/_build/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # Publish to Package Registries
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/* --skip-existing

      - name: Publish to GitHub Packages
        run: |
          echo "Publishing to GitHub Packages..."
          # Add GitHub Packages publishing logic here

  # Notify Teams
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Release ${{ needs.validate.outputs.version }} has been published!
            View release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Release ${{ needs.validate.outputs.version }} Published
          body: |
            A new release has been published!
            
            Version: ${{ needs.validate.outputs.version }}
            Repository: ${{ github.repository }}
            Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}
          to: team@example.com
          from: GitHub Actions

  # Rollback Plan
  rollback:
    name: Rollback Plan
    runs-on: ubuntu-latest
    needs: [validate]
    if: failure()
    steps:
      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Rollback Plan for ${needs.validate.outputs.version}`,
              body: `## Rollback Required
              
              The release process for version ${needs.validate.outputs.version} has failed.
              
              ### Steps to rollback:
              1. Revert to previous version: ${needs.validate.outputs.previous_version}
              2. Delete the failed release tag
              3. Investigate the failure
              4. Fix the issues
              5. Re-run the release process
              
              ### Commands:
              \`\`\`bash
              git tag -d ${needs.validate.outputs.version}
              git push origin :refs/tags/${needs.validate.outputs.version}
              \`\`\``,
              labels: ['rollback', 'release', 'urgent']
            });