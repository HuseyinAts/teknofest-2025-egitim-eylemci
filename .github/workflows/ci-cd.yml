name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # LINT & FORMAT CHECK
  # ==========================================
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black pylint mypy flake8
      
      - name: Black formatting check
        run: black --check src/
      
      - name: Pylint check
        run: pylint src/ --exit-zero
      
      - name: Type checking with mypy
        run: mypy src/ --ignore-missing-imports
      
      - name: Flake8 check
        run: flake8 src/ --max-line-length=100 --ignore=E203,W503

  # ==========================================
  # SECURITY SCAN
  # ==========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install safety bandit
      
      - name: Safety check
        run: safety check --json
        continue-on-error: true
      
      - name: Bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  # ==========================================
  # UNIT TESTS
  # ==========================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          APP_ENV: testing
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  # ==========================================
  # INTEGRATION TESTS
  # ==========================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
      
      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 10  # Wait for services to start
      
      - name: Run integration tests
        run: |
          pytest tests/test_api_endpoints.py -v
          pytest tests/test_e2e_production.py -v
      
      - name: Stop services
        if: always()
        run: docker-compose down

  # ==========================================
  # BUILD & PUSH DOCKER IMAGE
  # ==========================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: teknofest2025/egitim-eylemci
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # DEPLOY TO STAGING
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.teknofest2025.com
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to Kubernetes Staging
        run: |
          echo "Deploying to staging..."
          # kubectl apply -f k8s/staging/
          # kubectl rollout status deployment/teknofest-api -n staging

  # ==========================================
  # DEPLOY TO PRODUCTION
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.teknofest2025.com
    steps:
      - uses: actions/checkout@v3
      
      - name: Run database migrations
        run: |
          echo "Running migrations..."
          # alembic upgrade head
      
      - name: Deploy to Kubernetes Production
        run: |
          echo "Deploying to production..."
          # kubectl apply -f k8s/production/
          # kubectl rollout status deployment/teknofest-api -n production
      
      - name: Smoke tests
        run: |
          echo "Running smoke tests..."
          # curl https://api.teknofest2025.com/health
      
      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==========================================
  # PERFORMANCE TEST
  # ==========================================
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Locust performance tests
        run: |
          pip install locust
          locust -f tests/load_testing/locustfile.py \
            --host=https://staging.teknofest2025.com \
            --users=100 \
            --spawn-rate=10 \
            --time=60s \
            --headless \
            --only-summary
